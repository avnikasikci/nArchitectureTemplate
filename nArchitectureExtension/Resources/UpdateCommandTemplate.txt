using AutoMapper;
using Core.Application.Pipelines.Authorization;
using {ApplicationNamespace}.Features.{PluralEntityName}.Dtos;
using {ApplicationNamespace}.Features.{PluralEntityName}.Rules;
using {ApplicationNamespace}.Services.Repositories;
using {EntityNamespace};
using MediatR;

namespace {ApplicationNamespace}.Features.{PluralEntityName}.Commands.Update{EntityName}
{
    public class Update{EntityName}Command : IRequest<Updated{EntityName}Dto>, ISecuredRequest
    {
        {Properties}
        public string[] Roles => new[] { nameof(Update{EntityName}Command) };

        public class Update{EntityName}CommandHandler : IRequestHandler<Update{EntityName}Command, Updated{EntityName}Dto>
        {
            private readonly IMapper _mapper;
            private readonly I{EntityName}Repository _{entityName}Repository;
            private readonly {EntityName}BusinessRule _{entityName}BusinessRule;

            public Update{EntityName}CommandHandler(IMapper mapper, I{EntityName}Repository {entityName}Repository, {EntityName}BusinessRule {entityName}BusinessRule)
            {
                _mapper = mapper;
                _{entityName}Repository = {entityName}Repository;
                _{entityName}BusinessRule = {entityName}BusinessRule;
            }

            public async Task<Updated{EntityName}Dto> Handle(Update{EntityName}Command request, CancellationToken cancellationToken)
            {            
                {EntityName} mapped{EntityName} = _mapper.Map<{EntityName}>(request);
                {EntityName} updated{EntityName} =await _{entityName}Repository.UpdateAsync(mapped{EntityName});
                Updated{EntityName}Dto updated{EntityName}Dto=_mapper.Map<Updated{EntityName}Dto>(updated{EntityName});
                return updated{EntityName}Dto;
            }
        }
    }
}
