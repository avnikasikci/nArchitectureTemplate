using AutoMapper;
using Core.Application.Pipelines.Authorization;
using {ApplicationNamespace}.Features.{PluralEntityName}.Dtos;
using {ApplicationNamespace}.Features.{PluralEntityName}.Rules;
using {ApplicationNamespace}.Services.Repositories;
using {EntityNamespace};
using MediatR;

namespace {ApplicationNamespace}.Features.{PluralEntityName}.Commands.Create{EntityName}
{
    public class Create{EntityName}Command : IRequest<Created{EntityName}Dto>,ISecuredRequest
    {
        {Properties}
        public string[] Roles => new[] { nameof(Create{EntityName}Command) };

        public class Create{EntityName}CommandHandler : IRequestHandler<Create{EntityName}Command, Created{EntityName}Dto>
        {
            private readonly IMapper _mapper;
            private readonly I{EntityName}Repository _{entityName}Repository;
            private readonly {EntityName}BusinessRule _{entityName}BusinessRule;

            public Create{EntityName}CommandHandler(IMapper mapper, I{EntityName}Repository {entityName}Repository, {EntityName}BusinessRule {entityName}BusinessRule)
            {
                _mapper = mapper;
                _{entityName}Repository = {entityName}Repository;
                _{entityName}BusinessRule = {entityName}BusinessRule;
            }

            public async Task<Created{EntityName}Dto> Handle(Create{EntityName}Command request, CancellationToken cancellationToken)
            {
                {EntityName} mapped{EntityName} = _mapper.Map<{EntityName}>(request);
                {EntityName} created{EntityName} = await _{entityName}Repository.AddAsync(mapped{EntityName});
                Created{EntityName}Dto created{EntityName}Dto=_mapper.Map<Created{EntityName}Dto>(created{EntityName});
                return created{EntityName}Dto;
            }
        }
    }
}
